// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_idprovider is a generated GoMock package.
package mock_idprovider

import (
	reflect "reflect"

	runtime "github.com/go-openapi/runtime"
	gomock "github.com/golang/mock/gomock"
	admin "github.com/ory/hydra-client-go/client/admin"
	admin0 "github.com/ory/kratos-client-go/client/admin"
	public "github.com/ory/kratos-client-go/client/public"
)

// MockhydraAdminClientService is a mock of hydraAdminClientService interface.
type MockhydraAdminClientService struct {
	ctrl     *gomock.Controller
	recorder *MockhydraAdminClientServiceMockRecorder
}

// MockhydraAdminClientServiceMockRecorder is the mock recorder for MockhydraAdminClientService.
type MockhydraAdminClientServiceMockRecorder struct {
	mock *MockhydraAdminClientService
}

// NewMockhydraAdminClientService creates a new mock instance.
func NewMockhydraAdminClientService(ctrl *gomock.Controller) *MockhydraAdminClientService {
	mock := &MockhydraAdminClientService{ctrl: ctrl}
	mock.recorder = &MockhydraAdminClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockhydraAdminClientService) EXPECT() *MockhydraAdminClientServiceMockRecorder {
	return m.recorder
}

// AcceptConsentRequest mocks base method.
func (m *MockhydraAdminClientService) AcceptConsentRequest(params *admin.AcceptConsentRequestParams) (*admin.AcceptConsentRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptConsentRequest", params)
	ret0, _ := ret[0].(*admin.AcceptConsentRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptConsentRequest indicates an expected call of AcceptConsentRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) AcceptConsentRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptConsentRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).AcceptConsentRequest), params)
}

// AcceptLoginRequest mocks base method.
func (m *MockhydraAdminClientService) AcceptLoginRequest(params *admin.AcceptLoginRequestParams) (*admin.AcceptLoginRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptLoginRequest", params)
	ret0, _ := ret[0].(*admin.AcceptLoginRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptLoginRequest indicates an expected call of AcceptLoginRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) AcceptLoginRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptLoginRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).AcceptLoginRequest), params)
}

// GetConsentRequest mocks base method.
func (m *MockhydraAdminClientService) GetConsentRequest(params *admin.GetConsentRequestParams) (*admin.GetConsentRequestOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsentRequest", params)
	ret0, _ := ret[0].(*admin.GetConsentRequestOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsentRequest indicates an expected call of GetConsentRequest.
func (mr *MockhydraAdminClientServiceMockRecorder) GetConsentRequest(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsentRequest", reflect.TypeOf((*MockhydraAdminClientService)(nil).GetConsentRequest), params)
}

// IntrospectOAuth2Token mocks base method.
func (m *MockhydraAdminClientService) IntrospectOAuth2Token(params *admin.IntrospectOAuth2TokenParams) (*admin.IntrospectOAuth2TokenOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IntrospectOAuth2Token", params)
	ret0, _ := ret[0].(*admin.IntrospectOAuth2TokenOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IntrospectOAuth2Token indicates an expected call of IntrospectOAuth2Token.
func (mr *MockhydraAdminClientServiceMockRecorder) IntrospectOAuth2Token(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IntrospectOAuth2Token", reflect.TypeOf((*MockhydraAdminClientService)(nil).IntrospectOAuth2Token), params)
}

// MockkratosPublicClientService is a mock of kratosPublicClientService interface.
type MockkratosPublicClientService struct {
	ctrl     *gomock.Controller
	recorder *MockkratosPublicClientServiceMockRecorder
}

// MockkratosPublicClientServiceMockRecorder is the mock recorder for MockkratosPublicClientService.
type MockkratosPublicClientServiceMockRecorder struct {
	mock *MockkratosPublicClientService
}

// NewMockkratosPublicClientService creates a new mock instance.
func NewMockkratosPublicClientService(ctrl *gomock.Controller) *MockkratosPublicClientService {
	mock := &MockkratosPublicClientService{ctrl: ctrl}
	mock.recorder = &MockkratosPublicClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkratosPublicClientService) EXPECT() *MockkratosPublicClientServiceMockRecorder {
	return m.recorder
}

// Whoami mocks base method.
func (m *MockkratosPublicClientService) Whoami(params *public.WhoamiParams, authInfo runtime.ClientAuthInfoWriter) (*public.WhoamiOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Whoami", params, authInfo)
	ret0, _ := ret[0].(*public.WhoamiOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Whoami indicates an expected call of Whoami.
func (mr *MockkratosPublicClientServiceMockRecorder) Whoami(params, authInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Whoami", reflect.TypeOf((*MockkratosPublicClientService)(nil).Whoami), params, authInfo)
}

// MockkratosAdminClientService is a mock of kratosAdminClientService interface.
type MockkratosAdminClientService struct {
	ctrl     *gomock.Controller
	recorder *MockkratosAdminClientServiceMockRecorder
}

// MockkratosAdminClientServiceMockRecorder is the mock recorder for MockkratosAdminClientService.
type MockkratosAdminClientServiceMockRecorder struct {
	mock *MockkratosAdminClientService
}

// NewMockkratosAdminClientService creates a new mock instance.
func NewMockkratosAdminClientService(ctrl *gomock.Controller) *MockkratosAdminClientService {
	mock := &MockkratosAdminClientService{ctrl: ctrl}
	mock.recorder = &MockkratosAdminClientServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockkratosAdminClientService) EXPECT() *MockkratosAdminClientServiceMockRecorder {
	return m.recorder
}

// CreateIdentity mocks base method.
func (m *MockkratosAdminClientService) CreateIdentity(params *admin0.CreateIdentityParams) (*admin0.CreateIdentityCreated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentity", params)
	ret0, _ := ret[0].(*admin0.CreateIdentityCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentity indicates an expected call of CreateIdentity.
func (mr *MockkratosAdminClientServiceMockRecorder) CreateIdentity(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentity", reflect.TypeOf((*MockkratosAdminClientService)(nil).CreateIdentity), params)
}

// CreateRecoveryLink mocks base method.
func (m *MockkratosAdminClientService) CreateRecoveryLink(params *admin0.CreateRecoveryLinkParams) (*admin0.CreateRecoveryLinkOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateRecoveryLink", params)
	ret0, _ := ret[0].(*admin0.CreateRecoveryLinkOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateRecoveryLink indicates an expected call of CreateRecoveryLink.
func (mr *MockkratosAdminClientServiceMockRecorder) CreateRecoveryLink(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateRecoveryLink", reflect.TypeOf((*MockkratosAdminClientService)(nil).CreateRecoveryLink), params)
}

// GetIdentity mocks base method.
func (m *MockkratosAdminClientService) GetIdentity(params *admin0.GetIdentityParams) (*admin0.GetIdentityOK, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", params)
	ret0, _ := ret[0].(*admin0.GetIdentityOK)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockkratosAdminClientServiceMockRecorder) GetIdentity(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockkratosAdminClientService)(nil).GetIdentity), params)
}
