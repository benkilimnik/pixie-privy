// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: experimental/stirling/proto_data_model/proto/http_record.proto

package http

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type HTTPRecord struct {
	TimeStampNs   uint64 `protobuf:"varint,1,opt,name=time_stamp_ns,json=timeStampNs,proto3" json:"time_stamp_ns,omitempty"`
	Tgid          uint32 `protobuf:"varint,2,opt,name=tgid,proto3" json:"tgid,omitempty"`
	Fd            uint32 `protobuf:"varint,3,opt,name=fd,proto3" json:"fd,omitempty"`
	Type          string `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	SrcAddr       string `protobuf:"bytes,5,opt,name=src_addr,json=srcAddr,proto3" json:"src_addr,omitempty"`
	SrcPort       uint32 `protobuf:"varint,6,opt,name=src_port,json=srcPort,proto3" json:"src_port,omitempty"`
	DstAddr       string `protobuf:"bytes,7,opt,name=dst_addr,json=dstAddr,proto3" json:"dst_addr,omitempty"`
	DstPort       uint32 `protobuf:"varint,8,opt,name=dst_port,json=dstPort,proto3" json:"dst_port,omitempty"`
	MinorVersion  uint32 `protobuf:"varint,9,opt,name=minor_version,json=minorVersion,proto3" json:"minor_version,omitempty"`
	Headers       string `protobuf:"bytes,10,opt,name=headers,proto3" json:"headers,omitempty"`
	ReqMethod     string `protobuf:"bytes,11,opt,name=req_method,json=reqMethod,proto3" json:"req_method,omitempty"`
	ReqPath       string `protobuf:"bytes,12,opt,name=req_path,json=reqPath,proto3" json:"req_path,omitempty"`
	RespStatus    uint32 `protobuf:"varint,13,opt,name=resp_status,json=respStatus,proto3" json:"resp_status,omitempty"`
	RespMessage   string `protobuf:"bytes,14,opt,name=resp_message,json=respMessage,proto3" json:"resp_message,omitempty"`
	RespBody      string `protobuf:"bytes,15,opt,name=resp_body,json=respBody,proto3" json:"resp_body,omitempty"`
	RespLatencyNs uint64 `protobuf:"varint,16,opt,name=resp_latency_ns,json=respLatencyNs,proto3" json:"resp_latency_ns,omitempty"`
}

func (m *HTTPRecord) Reset()      { *m = HTTPRecord{} }
func (*HTTPRecord) ProtoMessage() {}
func (*HTTPRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c9c6bcb74b240f, []int{0}
}
func (m *HTTPRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HTTPRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HTTPRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HTTPRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HTTPRecord.Merge(m, src)
}
func (m *HTTPRecord) XXX_Size() int {
	return m.Size()
}
func (m *HTTPRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_HTTPRecord.DiscardUnknown(m)
}

var xxx_messageInfo_HTTPRecord proto.InternalMessageInfo

func (m *HTTPRecord) GetTimeStampNs() uint64 {
	if m != nil {
		return m.TimeStampNs
	}
	return 0
}

func (m *HTTPRecord) GetTgid() uint32 {
	if m != nil {
		return m.Tgid
	}
	return 0
}

func (m *HTTPRecord) GetFd() uint32 {
	if m != nil {
		return m.Fd
	}
	return 0
}

func (m *HTTPRecord) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *HTTPRecord) GetSrcAddr() string {
	if m != nil {
		return m.SrcAddr
	}
	return ""
}

func (m *HTTPRecord) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *HTTPRecord) GetDstAddr() string {
	if m != nil {
		return m.DstAddr
	}
	return ""
}

func (m *HTTPRecord) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *HTTPRecord) GetMinorVersion() uint32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *HTTPRecord) GetHeaders() string {
	if m != nil {
		return m.Headers
	}
	return ""
}

func (m *HTTPRecord) GetReqMethod() string {
	if m != nil {
		return m.ReqMethod
	}
	return ""
}

func (m *HTTPRecord) GetReqPath() string {
	if m != nil {
		return m.ReqPath
	}
	return ""
}

func (m *HTTPRecord) GetRespStatus() uint32 {
	if m != nil {
		return m.RespStatus
	}
	return 0
}

func (m *HTTPRecord) GetRespMessage() string {
	if m != nil {
		return m.RespMessage
	}
	return ""
}

func (m *HTTPRecord) GetRespBody() string {
	if m != nil {
		return m.RespBody
	}
	return ""
}

func (m *HTTPRecord) GetRespLatencyNs() uint64 {
	if m != nil {
		return m.RespLatencyNs
	}
	return 0
}

func init() {
	proto.RegisterType((*HTTPRecord)(nil), "experimental.HTTPRecord")
}

func init() {
	proto.RegisterFile("experimental/stirling/proto_data_model/proto/http_record.proto", fileDescriptor_84c9c6bcb74b240f)
}

var fileDescriptor_84c9c6bcb74b240f = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x92, 0x31, 0x6f, 0x13, 0x31,
	0x14, 0x80, 0xcf, 0x69, 0x68, 0x12, 0x27, 0xd7, 0x22, 0x4f, 0x46, 0x08, 0x13, 0x8a, 0x84, 0x32,
	0x91, 0x81, 0x8d, 0x01, 0x89, 0x4e, 0x0c, 0xb4, 0x8a, 0xd2, 0x8a, 0x81, 0xe5, 0xe4, 0xc6, 0xaf,
	0xb9, 0x93, 0x72, 0xe7, 0xcb, 0xf3, 0x03, 0x91, 0x8d, 0x9f, 0xc0, 0xcf, 0xe0, 0xa7, 0x30, 0x66,
	0x42, 0x1d, 0xc9, 0x65, 0x61, 0xec, 0x4f, 0x40, 0x7e, 0x47, 0xa4, 0x6e, 0xbe, 0xef, 0x7b, 0x9f,
	0x2d, 0x9d, 0x2d, 0xdf, 0xc1, 0xb7, 0x1a, 0xb0, 0x28, 0xa1, 0x22, 0xbb, 0x9a, 0x06, 0x2a, 0x70,
	0x55, 0x54, 0xcb, 0x69, 0x8d, 0x9e, 0x7c, 0xe6, 0x2c, 0xd9, 0xac, 0xf4, 0x0e, 0x56, 0x2d, 0x98,
	0xe6, 0x44, 0x75, 0x86, 0xb0, 0xf0, 0xe8, 0x5e, 0x33, 0x51, 0xa3, 0x87, 0xfd, 0xd9, 0xef, 0x23,
	0x29, 0x3f, 0x5c, 0x5f, 0xcf, 0xe6, 0x3c, 0xa2, 0xce, 0x64, 0x4a, 0x45, 0x09, 0x59, 0x20, 0x5b,
	0xd6, 0x59, 0x15, 0xb4, 0x18, 0x8b, 0x49, 0x77, 0x3e, 0x8c, 0xf0, 0x2a, 0xb2, 0xcb, 0xa0, 0x94,
	0xec, 0xd2, 0xb2, 0x70, 0xba, 0x33, 0x16, 0x93, 0x74, 0xce, 0x6b, 0x75, 0x22, 0x3b, 0xb7, 0x4e,
	0x1f, 0x31, 0xe9, 0xdc, 0x3a, 0x9e, 0xd9, 0xd4, 0xa0, 0xbb, 0x63, 0x31, 0x19, 0xcc, 0x79, 0xad,
	0x9e, 0xc8, 0x7e, 0xc0, 0x45, 0x66, 0x9d, 0x43, 0xfd, 0x88, 0x79, 0x2f, 0xe0, 0xe2, 0xbd, 0x73,
	0x78, 0x50, 0xb5, 0x47, 0xd2, 0xc7, 0xbc, 0x49, 0x54, 0x33, 0x8f, 0x14, 0x95, 0x0b, 0xd4, 0x56,
	0xbd, 0xb6, 0x72, 0x81, 0x0e, 0x55, 0x54, 0x5c, 0xf5, 0xdb, 0xca, 0x05, 0xe2, 0xea, 0xa5, 0x4c,
	0xcb, 0xa2, 0xf2, 0x98, 0x7d, 0x05, 0x0c, 0x85, 0xaf, 0xf4, 0x80, 0xfd, 0x88, 0xe1, 0xa7, 0x96,
	0x29, 0x2d, 0x7b, 0x39, 0x58, 0x07, 0x18, 0xb4, 0x6c, 0x77, 0xfe, 0xff, 0xa9, 0x9e, 0x49, 0x89,
	0xb0, 0xce, 0x4a, 0xa0, 0xdc, 0x3b, 0x3d, 0x64, 0x39, 0x40, 0x58, 0x5f, 0x30, 0x88, 0x07, 0x47,
	0x5d, 0x5b, 0xca, 0xf5, 0xa8, 0x2d, 0x11, 0xd6, 0x33, 0x4b, 0xb9, 0x7a, 0x2e, 0x87, 0x08, 0xa1,
	0x8e, 0x3f, 0x90, 0xbe, 0x04, 0x9d, 0xf2, 0xb1, 0x32, 0xa2, 0x2b, 0x26, 0xea, 0x85, 0x1c, 0xf1,
	0x40, 0x09, 0x21, 0xd8, 0x25, 0xe8, 0x13, 0xee, 0x39, 0xba, 0x68, 0x91, 0x7a, 0x2a, 0x07, 0x3c,
	0x72, 0xe3, 0xdd, 0x46, 0x9f, 0xb2, 0xef, 0x47, 0x70, 0xee, 0xdd, 0x46, 0xbd, 0x92, 0xa7, 0x2c,
	0x57, 0x96, 0xa0, 0x5a, 0x6c, 0xe2, 0x1d, 0x3d, 0xe6, 0x3b, 0x4a, 0x23, 0xfe, 0xd8, 0xd2, 0xcb,
	0x70, 0xfe, 0x76, 0xbb, 0x33, 0xc9, 0xdd, 0xce, 0x24, 0xf7, 0x3b, 0x23, 0xbe, 0x37, 0x46, 0xfc,
	0x6c, 0x8c, 0xf8, 0xd5, 0x18, 0xb1, 0x6d, 0x8c, 0xf8, 0xd3, 0x18, 0xf1, 0xb7, 0x31, 0xc9, 0x7d,
	0x63, 0xc4, 0x8f, 0xbd, 0x49, 0xb6, 0x7b, 0x93, 0xdc, 0xed, 0x4d, 0xf2, 0xb9, 0x1b, 0xdf, 0xcb,
	0xcd, 0x31, 0xbf, 0x94, 0x37, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x1f, 0x0a, 0x6d, 0xbe, 0x6b,
	0x02, 0x00, 0x00,
}

func (this *HTTPRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*HTTPRecord)
	if !ok {
		that2, ok := that.(HTTPRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.TimeStampNs != that1.TimeStampNs {
		return false
	}
	if this.Tgid != that1.Tgid {
		return false
	}
	if this.Fd != that1.Fd {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if this.SrcAddr != that1.SrcAddr {
		return false
	}
	if this.SrcPort != that1.SrcPort {
		return false
	}
	if this.DstAddr != that1.DstAddr {
		return false
	}
	if this.DstPort != that1.DstPort {
		return false
	}
	if this.MinorVersion != that1.MinorVersion {
		return false
	}
	if this.Headers != that1.Headers {
		return false
	}
	if this.ReqMethod != that1.ReqMethod {
		return false
	}
	if this.ReqPath != that1.ReqPath {
		return false
	}
	if this.RespStatus != that1.RespStatus {
		return false
	}
	if this.RespMessage != that1.RespMessage {
		return false
	}
	if this.RespBody != that1.RespBody {
		return false
	}
	if this.RespLatencyNs != that1.RespLatencyNs {
		return false
	}
	return true
}
func (this *HTTPRecord) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 20)
	s = append(s, "&http.HTTPRecord{")
	s = append(s, "TimeStampNs: "+fmt.Sprintf("%#v", this.TimeStampNs)+",\n")
	s = append(s, "Tgid: "+fmt.Sprintf("%#v", this.Tgid)+",\n")
	s = append(s, "Fd: "+fmt.Sprintf("%#v", this.Fd)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "SrcAddr: "+fmt.Sprintf("%#v", this.SrcAddr)+",\n")
	s = append(s, "SrcPort: "+fmt.Sprintf("%#v", this.SrcPort)+",\n")
	s = append(s, "DstAddr: "+fmt.Sprintf("%#v", this.DstAddr)+",\n")
	s = append(s, "DstPort: "+fmt.Sprintf("%#v", this.DstPort)+",\n")
	s = append(s, "MinorVersion: "+fmt.Sprintf("%#v", this.MinorVersion)+",\n")
	s = append(s, "Headers: "+fmt.Sprintf("%#v", this.Headers)+",\n")
	s = append(s, "ReqMethod: "+fmt.Sprintf("%#v", this.ReqMethod)+",\n")
	s = append(s, "ReqPath: "+fmt.Sprintf("%#v", this.ReqPath)+",\n")
	s = append(s, "RespStatus: "+fmt.Sprintf("%#v", this.RespStatus)+",\n")
	s = append(s, "RespMessage: "+fmt.Sprintf("%#v", this.RespMessage)+",\n")
	s = append(s, "RespBody: "+fmt.Sprintf("%#v", this.RespBody)+",\n")
	s = append(s, "RespLatencyNs: "+fmt.Sprintf("%#v", this.RespLatencyNs)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringHttpRecord(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *HTTPRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HTTPRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HTTPRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RespLatencyNs != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.RespLatencyNs))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.RespBody) > 0 {
		i -= len(m.RespBody)
		copy(dAtA[i:], m.RespBody)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.RespBody)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.RespMessage) > 0 {
		i -= len(m.RespMessage)
		copy(dAtA[i:], m.RespMessage)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.RespMessage)))
		i--
		dAtA[i] = 0x72
	}
	if m.RespStatus != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.RespStatus))
		i--
		dAtA[i] = 0x68
	}
	if len(m.ReqPath) > 0 {
		i -= len(m.ReqPath)
		copy(dAtA[i:], m.ReqPath)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.ReqPath)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ReqMethod) > 0 {
		i -= len(m.ReqMethod)
		copy(dAtA[i:], m.ReqMethod)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.ReqMethod)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Headers) > 0 {
		i -= len(m.Headers)
		copy(dAtA[i:], m.Headers)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.Headers)))
		i--
		dAtA[i] = 0x52
	}
	if m.MinorVersion != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.MinorVersion))
		i--
		dAtA[i] = 0x48
	}
	if m.DstPort != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.DstPort))
		i--
		dAtA[i] = 0x40
	}
	if len(m.DstAddr) > 0 {
		i -= len(m.DstAddr)
		copy(dAtA[i:], m.DstAddr)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.DstAddr)))
		i--
		dAtA[i] = 0x3a
	}
	if m.SrcPort != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.SrcPort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SrcAddr) > 0 {
		i -= len(m.SrcAddr)
		copy(dAtA[i:], m.SrcAddr)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.SrcAddr)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintHttpRecord(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x22
	}
	if m.Fd != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.Fd))
		i--
		dAtA[i] = 0x18
	}
	if m.Tgid != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.Tgid))
		i--
		dAtA[i] = 0x10
	}
	if m.TimeStampNs != 0 {
		i = encodeVarintHttpRecord(dAtA, i, uint64(m.TimeStampNs))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintHttpRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovHttpRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HTTPRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TimeStampNs != 0 {
		n += 1 + sovHttpRecord(uint64(m.TimeStampNs))
	}
	if m.Tgid != 0 {
		n += 1 + sovHttpRecord(uint64(m.Tgid))
	}
	if m.Fd != 0 {
		n += 1 + sovHttpRecord(uint64(m.Fd))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	l = len(m.SrcAddr)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	if m.SrcPort != 0 {
		n += 1 + sovHttpRecord(uint64(m.SrcPort))
	}
	l = len(m.DstAddr)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	if m.DstPort != 0 {
		n += 1 + sovHttpRecord(uint64(m.DstPort))
	}
	if m.MinorVersion != 0 {
		n += 1 + sovHttpRecord(uint64(m.MinorVersion))
	}
	l = len(m.Headers)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	l = len(m.ReqMethod)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	l = len(m.ReqPath)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	if m.RespStatus != 0 {
		n += 1 + sovHttpRecord(uint64(m.RespStatus))
	}
	l = len(m.RespMessage)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	l = len(m.RespBody)
	if l > 0 {
		n += 1 + l + sovHttpRecord(uint64(l))
	}
	if m.RespLatencyNs != 0 {
		n += 2 + sovHttpRecord(uint64(m.RespLatencyNs))
	}
	return n
}

func sovHttpRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHttpRecord(x uint64) (n int) {
	return sovHttpRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *HTTPRecord) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&HTTPRecord{`,
		`TimeStampNs:` + fmt.Sprintf("%v", this.TimeStampNs) + `,`,
		`Tgid:` + fmt.Sprintf("%v", this.Tgid) + `,`,
		`Fd:` + fmt.Sprintf("%v", this.Fd) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`SrcAddr:` + fmt.Sprintf("%v", this.SrcAddr) + `,`,
		`SrcPort:` + fmt.Sprintf("%v", this.SrcPort) + `,`,
		`DstAddr:` + fmt.Sprintf("%v", this.DstAddr) + `,`,
		`DstPort:` + fmt.Sprintf("%v", this.DstPort) + `,`,
		`MinorVersion:` + fmt.Sprintf("%v", this.MinorVersion) + `,`,
		`Headers:` + fmt.Sprintf("%v", this.Headers) + `,`,
		`ReqMethod:` + fmt.Sprintf("%v", this.ReqMethod) + `,`,
		`ReqPath:` + fmt.Sprintf("%v", this.ReqPath) + `,`,
		`RespStatus:` + fmt.Sprintf("%v", this.RespStatus) + `,`,
		`RespMessage:` + fmt.Sprintf("%v", this.RespMessage) + `,`,
		`RespBody:` + fmt.Sprintf("%v", this.RespBody) + `,`,
		`RespLatencyNs:` + fmt.Sprintf("%v", this.RespLatencyNs) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringHttpRecord(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *HTTPRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHttpRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HTTPRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HTTPRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeStampNs", wireType)
			}
			m.TimeStampNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeStampNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tgid", wireType)
			}
			m.Tgid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Tgid |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fd", wireType)
			}
			m.Fd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Fd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SrcAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SrcPort", wireType)
			}
			m.SrcPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SrcPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DstAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DstPort", wireType)
			}
			m.DstPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DstPort |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinorVersion", wireType)
			}
			m.MinorVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinorVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Headers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Headers = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReqPath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespStatus", wireType)
			}
			m.RespStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespStatus |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespBody", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHttpRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespBody = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespLatencyNs", wireType)
			}
			m.RespLatencyNs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RespLatencyNs |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipHttpRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHttpRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHttpRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHttpRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHttpRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHttpRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHttpRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHttpRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHttpRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHttpRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHttpRecord = fmt.Errorf("proto: unexpected end of group")
)
