# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import pxtrace
import px

# Adapted from https://github.com/iovisor/bpftrace/blob/master/tools/tcpretrans.bt
program = """
#include <linux/socket.h>
#include <net/sock.h>

BEGIN
{
  // See include/net/tcp_states.h:
  @tcp_states[1] = \"ESTABLISHED\";
  @tcp_states[2] = \"SYN_SENT\";
  @tcp_states[3] = \"SYN_RECV\";
  @tcp_states[4] = \"FIN_WAIT1\";
  @tcp_states[5] = \"FIN_WAIT2\";
  @tcp_states[6] = \"TIME_WAIT\";
  @tcp_states[7] = \"CLOSE\";
  @tcp_states[8] = \"CLOSE_WAIT\";
  @tcp_states[9] = \"LAST_ACK\";
  @tcp_states[10] = \"LISTEN\";
  @tcp_states[11] = \"CLOSING\";
  @tcp_states[12] = \"NEW_SYN_RECV\";
}

kprobe:tcp_retransmit_skb
{
  $sk = (struct sock *)arg0;
  $inet_family = $sk->__sk_common.skc_family;

  $AF_INET = (uint16) 2;
  $AF_INET6 = (uint16) 10;

  if ($inet_family == $AF_INET || $inet_family == $AF_INET6) {
    // initialize variable type:
    $daddr = ntop(0);
    $saddr = ntop(0);
    if ($inet_family == $AF_INET) {
      $daddr = ntop($sk->__sk_common.skc_daddr);
      $saddr = ntop($sk->__sk_common.skc_rcv_saddr);
    } else {
      $daddr = ntop($sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
      $saddr = ntop($sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
    }
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;

    // Destination port is big endian, it must be flipped
    $dport = ($dport >> 8) | (($dport << 8) & 0x00FF00);

    $state = $sk->__sk_common.skc_state;
    $statestr = @tcp_states[$state];

    printf(\"%llu %u %llu %s:%d %s:%d %s\",
      nsecs,
      pid,
      ((struct task_struct*)curtask)->group_leader->start_time / 10000000,
      $saddr,
      $lport,
      $daddr,
      $dport,
      $statestr);
  }
}

END
{
  clear(@tcp_states);
}
"""

name = 'tcp_retransmits'

pxtrace.UpsertTracepoint(name,
                         name,
                         program,
                         pxtrace.kprobe(),
                         "10m")

# Rename columns
df = px.DataFrame(table=name,
                  select=['time', 'Column_3', 'Column_4', 'Column_5', 'Column_6', 'Column_7'])
df.src_ip = df.Column_3
df.src_port = df.Column_4
df.dst_ip = df.Column_5
df.dst_port = df.Column_6
df.state = df.Column_7
df = df.drop(['Column_3', 'Column_4', 'Column_5', 'Column_6', 'Column_7'])

# df = df.groupby(['src_ip', 'dst_ip']).agg(count=('time', px.count))

px.display(df)
