# Copyright 2018- The Pixie Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

import pxtrace
import px

# Adapted from https://github.com/iovisor/bpftrace/blob/master/tools/tcplife.bt
program = """
#include <net/tcp_states.h>
#include <net/sock.h>
#include <linux/socket.h>
#include <linux/tcp.h>

//BEGIN
//{
//  printf(\"%-5s %-10s %-15s %-5s %-15s %-5s \",
//         \"PID\", \"COMM\", \"LADDR\", \"LPORT\", \"RADDR\", \"RPORT\");
//  printf(\"%5s %5s %s\\n\", \"TX_KB\", \"RX_KB\", \"MS\");
//}

kprobe:tcp_set_state
{
  $sk = (struct sock *)arg0;
  $newstate = arg1;

  $AF_INET = (uint16) 2;
  $AF_INET6 = (uint16) 10;

  /*
   * This tool includes PID and comm context. From TCP this is best
   * effort, and may be wrong in some situations. It does this:
   * - record timestamp on any state < TCP_FIN_WAIT1
   *  note some state transitions may not be present via this kprobe
   * - cache task context on:
   *  TCP_SYN_SENT: tracing from client
   *  TCP_LAST_ACK: client-closed from server
   * - do output on TCP_CLOSE:
   *  fetch task context if cached, or use current task
   */

  // record first timestamp seen for this socket
  if ($newstate < TCP_FIN_WAIT1 && @birth[$sk] == 0) {
    @birth[$sk] = nsecs;
  }

  // record PID & comm on SYN_SENT
  if ($newstate == TCP_SYN_SENT || $newstate == TCP_LAST_ACK) {
    @skpid[$sk] = pid;
    @skcomm[$sk] = comm;
  }

  // session ended: calculate lifespan and print
  if ($newstate == TCP_CLOSE && @birth[$sk]) {
    $delta_ms = (nsecs - @birth[$sk]) / 1e6;
    $lport = $sk->__sk_common.skc_num;
    $dport = $sk->__sk_common.skc_dport;
    $dport = ($dport >> 8) | (($dport << 8) & 0xff00);
    $tp = (struct tcp_sock *)$sk;
    $pid = @skpid[$sk];
    $comm = @skcomm[$sk];
    if ($comm == "") {
      // not cached, use current task
      $pid = pid;
      $comm = comm;
    }

    $family = $sk->__sk_common.skc_family;
    $saddr = ntop(0);
    $daddr = ntop(0);
    if ($family == $AF_INET) {
      $saddr = ntop($AF_INET, $sk->__sk_common.skc_rcv_saddr);
      $daddr = ntop($AF_INET, $sk->__sk_common.skc_daddr);
    } else {
      // $AF_INET6
      $saddr = ntop($AF_INET6, $sk->__sk_common.skc_v6_rcv_saddr.in6_u.u6_addr8);
      $daddr = ntop($AF_INET6, $sk->__sk_common.skc_v6_daddr.in6_u.u6_addr8);
    }
    printf(\"%-5d %-10.10s %-15s %-5d %-15s %-6d %5d %5d %d\\n\",
           $pid,
           $comm,
           $saddr,
           $lport,
           $daddr,
           $dport,
           $tp->bytes_acked / 1024,
           $tp->bytes_received / 1024,
           $delta_ms);

    delete(@birth[$sk]);
    delete(@skpid[$sk]);
    delete(@skcomm[$sk]);
  }
}

END
{
  clear(@birth); clear(@skpid); clear(@skcomm);
}
"""

name = 'tcp_life'

pxtrace.UpsertTracepoint(name,
                         name,
                         program,
                         pxtrace.kprobe(),
                         "5m")

px.display(px.DataFrame(name))
