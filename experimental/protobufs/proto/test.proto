/*
 * Copyright 2018- The Pixie Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 */

syntax = "proto3";

package experimental;

message Foo1 {
  int32 i32 = 1;
}

message Foo2 {
  int32 i32 = 1;
}

message Foo3 {
  fixed32 f32 = 1;
  string str = 2;
  Foo2 foo2 = 3;
  message Bar3 {
    int32 i32 = 1;
  }
  Bar3 bar3 = 4;
  repeated int32 i32s = 5;
  // proto3 does not support groups. You need change syntax to "proto2" to use this.
  // group Group = 6 {
  //   int32 i32 = 1;
  // }
}

message Bar1 {
  int64 i64 = 1;
}

message MessageWithCompatibleFields1 {
  int32 i32 = 1;
  uint32 ui32 = 2;
  sint32 si32 = 3;
  bool tf = 4;
  int32 i32a = 5;
}

message MessageWithCompatibleFields2 {
  int64 i64 = 1;
  uint64 ui64 = 2;
  sint64 si64 = 3;
  enum Bool {
    False = 0;
    True = 1;
  }
  Bool tf = 4;
  uint32 ui32 = 5;
}

message MessageWithLengthDelimitedFields1 {
  string str = 1;
  bytes bs = 2;
  message Embeded {
    int32 i32 = 1;
  }
  Embeded msg = 3;
  Foo1 foo1 = 4;
  string str2 = 5;
}

message MessageWithLengthDelimitedFields2 {
  bytes bs = 1;
  string str = 2;
  string msg_str = 3;
  bytes msg_bytes = 4;
  repeated int32 ri32 = 5;
}

message RepeatedInt32 {
  repeated int32 ri32s = 1;
}

message String {
  string str = 1;
}

message DifferentWireTypes1 {
  int32 i321 = 1;
  int32 i322 = 2;
  int32 i323 = 3;
  fixed32 f321 = 4;
  fixed32 f322 = 5;
  fixed32 f323 = 6;
  fixed64 f641 = 7;
  fixed64 f642 = 8;
  fixed64 f643 = 9;
  string str1 = 10;
  string str2 = 11;
  string str3 = 12;
}

message DifferentWireTypes2 {
  fixed32 f321 = 1;
  fixed64 f641 = 2;
  string str1 = 3;
  int32 i321 = 4;
  fixed64 f642 = 5;
  string str2 = 6;
  int32 i322 = 7;
  fixed32 f322 = 8;
  string str3 = 9;
  int32 i323 = 10;
  fixed32 f323 = 11;
  fixed64 f643 = 12;
}

enum Enum {
  V1 = 0;
  V2 = 1;
}

message RepeatedFields {
  // proto3 by default packs numeric types as length delimited wire type.
  // Disable packed so that this will be serialized as multiple varint fields.
  repeated int32 i32s = 1 [ packed = false ];
  repeated string strs = 2;
  repeated Enum enums = 3 [ packed = false ];
  repeated Foo1 foo1s = 4;
}

message OptionalFields {
  int32 i32 = 1;
  string str = 2;
  Enum enum = 3;
  Foo1 foo1 = 4;
}

message VarintWireFormatFields {
  int32 i32 = 1;
  int64 i64 = 2;
  uint32 u32 = 3;
  uint64 u64 = 4;
  sint32 s32 = 5;
  sint64 s64 = 6;
  bool boo = 7;
  enum Enum {
    EnumValue1 = 0;
    EnumValue2 = 1;
  }
  Enum enum_value = 8;
}

message BoolFields {
  bool boo1 = 1;
  bool boo2 = 2;
  bool boo3 = 3;
  bool boo4 = 4;
  bool boo5 = 5;
  bool boo6 = 6;
  bool boo7 = 7;
  bool boo8 = 8;
}

message Fixed32Fields {
  fixed32 f32 = 1;
  sfixed32 sf32 = 2;
  float f = 3;
  repeated fixed32 f32s = 4;
  repeated sfixed32 sf32s = 5;
  repeated float fs = 6;
}

message Fixed64Fields {
  fixed64 f64 = 1;
  sfixed64 sf64 = 2;
  double d = 3;
  repeated fixed64 f64s = 4;
  repeated sfixed64 sf64s = 5;
  repeated double ds = 6;
}

message AllFields {
  int32 i32 = 1;
  int64 i64 = 2;
  uint32 u32 = 3;
  uint64 u64 = 4;
  sint32 s32 = 5;
  sint64 s64 = 6;
  bool boo = 7;
  enum Enum {
    EnumValue1 = 0;
    EnumValue2 = 1;
  }
  Enum enum_value = 8;
  message Message {
    int32 i32 = 1;
  }
  Message msg = 9;
  repeated int32 i32s = 10;
  repeated int64 i64s = 11;
  repeated uint32 u32s = 12;
  repeated uint64 u64s = 13;
  repeated sint32 s32s = 14;
  repeated sint64 s64s = 15;
  repeated bool boos = 16;
  repeated Enum enum_values = 17;
  repeated Message msgs = 18;
  message Embeded {
    int32 i32 = 1;
  }
}

message ExternalEmbededFiled {
  AllFields.Embeded embedded = 1;
}

message RepeatedNonScalarFields {
  repeated string strs = 1;
  message Msg {
    int32 i32 = 1;
  }
  repeated Msg msgs = 2;
}

message RepeatedScalarFields {
  string strs = 1;
  message Msg {
    int32 i32 = 1;
  }
  Msg msg = 2;
}

message Req {
  message Embedded {}

  Embedded foo = 1;
}

message Resp {
  message Embedded {}

  Embedded foo = 1;
  enum Enum {
    Unknown = 0;
  }
  Enum enum = 2;
}

service FooService {
  rpc Method(Req) returns (Resp);
}
